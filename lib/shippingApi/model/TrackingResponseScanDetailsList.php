<?php
/**
 * TrackingResponseScanDetailsList
 *
 * PHP version 5
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace pitneybowesShipping\shippingApi.model;

use \ArrayAccess;
use \pitneybowesShipping\ObjectSerializer;

/**
 * TrackingResponseScanDetailsList Class Doc Comment
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackingResponseScanDetailsList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrackingResponse_scanDetailsList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_date' => '\DateTime',
        'event_time' => 'string',
        'event_city' => 'string',
        'event_state_or_province' => 'string',
        'postal_code' => 'int',
        'country' => 'string',
        'scan_type' => 'string',
        'scan_description' => 'string',
        'package_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'event_date' => 'date',
        'event_time' => 'time',
        'event_city' => null,
        'event_state_or_province' => null,
        'postal_code' => null,
        'country' => null,
        'scan_type' => null,
        'scan_description' => null,
        'package_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_date' => 'eventDate',
        'event_time' => 'eventTime',
        'event_city' => 'eventCity',
        'event_state_or_province' => 'eventStateOrProvince',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'scan_type' => 'scanType',
        'scan_description' => 'scanDescription',
        'package_status' => 'packageStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_date' => 'setEventDate',
        'event_time' => 'setEventTime',
        'event_city' => 'setEventCity',
        'event_state_or_province' => 'setEventStateOrProvince',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'scan_type' => 'setScanType',
        'scan_description' => 'setScanDescription',
        'package_status' => 'setPackageStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_date' => 'getEventDate',
        'event_time' => 'getEventTime',
        'event_city' => 'getEventCity',
        'event_state_or_province' => 'getEventStateOrProvince',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'scan_type' => 'getScanType',
        'scan_description' => 'getScanDescription',
        'package_status' => 'getPackageStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_date'] = isset($data['event_date']) ? $data['event_date'] : null;
        $this->container['event_time'] = isset($data['event_time']) ? $data['event_time'] : null;
        $this->container['event_city'] = isset($data['event_city']) ? $data['event_city'] : null;
        $this->container['event_state_or_province'] = isset($data['event_state_or_province']) ? $data['event_state_or_province'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['scan_type'] = isset($data['scan_type']) ? $data['scan_type'] : null;
        $this->container['scan_description'] = isset($data['scan_description']) ? $data['scan_description'] : null;
        $this->container['package_status'] = isset($data['package_status']) ? $data['package_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_date
     *
     * @return \DateTime|null
     */
    public function getEventDate()
    {
        return $this->container['event_date'];
    }

    /**
     * Sets event_date
     *
     * @param \DateTime|null $event_date event_date
     *
     * @return $this
     */
    public function setEventDate($event_date)
    {
        $this->container['event_date'] = $event_date;

        return $this;
    }

    /**
     * Gets event_time
     *
     * @return string|null
     */
    public function getEventTime()
    {
        return $this->container['event_time'];
    }

    /**
     * Sets event_time
     *
     * @param string|null $event_time event_time
     *
     * @return $this
     */
    public function setEventTime($event_time)
    {
        $this->container['event_time'] = $event_time;

        return $this;
    }

    /**
     * Gets event_city
     *
     * @return string|null
     */
    public function getEventCity()
    {
        return $this->container['event_city'];
    }

    /**
     * Sets event_city
     *
     * @param string|null $event_city event_city
     *
     * @return $this
     */
    public function setEventCity($event_city)
    {
        $this->container['event_city'] = $event_city;

        return $this;
    }

    /**
     * Gets event_state_or_province
     *
     * @return string|null
     */
    public function getEventStateOrProvince()
    {
        return $this->container['event_state_or_province'];
    }

    /**
     * Sets event_state_or_province
     *
     * @param string|null $event_state_or_province event_state_or_province
     *
     * @return $this
     */
    public function setEventStateOrProvince($event_state_or_province)
    {
        $this->container['event_state_or_province'] = $event_state_or_province;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return int|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param int|null $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets scan_type
     *
     * @return string|null
     */
    public function getScanType()
    {
        return $this->container['scan_type'];
    }

    /**
     * Sets scan_type
     *
     * @param string|null $scan_type scan_type
     *
     * @return $this
     */
    public function setScanType($scan_type)
    {
        $this->container['scan_type'] = $scan_type;

        return $this;
    }

    /**
     * Gets scan_description
     *
     * @return string|null
     */
    public function getScanDescription()
    {
        return $this->container['scan_description'];
    }

    /**
     * Sets scan_description
     *
     * @param string|null $scan_description scan_description
     *
     * @return $this
     */
    public function setScanDescription($scan_description)
    {
        $this->container['scan_description'] = $scan_description;

        return $this;
    }

    /**
     * Gets package_status
     *
     * @return string|null
     */
    public function getPackageStatus()
    {
        return $this->container['package_status'];
    }

    /**
     * Sets package_status
     *
     * @param string|null $package_status package_status
     *
     * @return $this
     */
    public function setPackageStatus($package_status)
    {
        $this->container['package_status'] = $package_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


