<?php
/**
 * RadioActivityDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace pitneybowesShipping\shippingApi.model;

use \ArrayAccess;
use \pitneybowesShipping\ObjectSerializer;

/**
 * RadioActivityDetail Class Doc Comment
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RadioActivityDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RadioActivityDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'criticality_safety_index' => 'float',
        'radio_active_parcel_dimension' => '\pitneybowesShipping\shippingApi.model\RadioActiveParcelDimension',
        'surface_reading' => 'float',
        'transport_index' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'criticality_safety_index' => null,
        'radio_active_parcel_dimension' => null,
        'surface_reading' => null,
        'transport_index' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'criticality_safety_index' => 'criticalitySafetyIndex',
        'radio_active_parcel_dimension' => 'radioActiveParcelDimension',
        'surface_reading' => 'surfaceReading',
        'transport_index' => 'transportIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'criticality_safety_index' => 'setCriticalitySafetyIndex',
        'radio_active_parcel_dimension' => 'setRadioActiveParcelDimension',
        'surface_reading' => 'setSurfaceReading',
        'transport_index' => 'setTransportIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'criticality_safety_index' => 'getCriticalitySafetyIndex',
        'radio_active_parcel_dimension' => 'getRadioActiveParcelDimension',
        'surface_reading' => 'getSurfaceReading',
        'transport_index' => 'getTransportIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['criticality_safety_index'] = isset($data['criticality_safety_index']) ? $data['criticality_safety_index'] : null;
        $this->container['radio_active_parcel_dimension'] = isset($data['radio_active_parcel_dimension']) ? $data['radio_active_parcel_dimension'] : null;
        $this->container['surface_reading'] = isset($data['surface_reading']) ? $data['surface_reading'] : null;
        $this->container['transport_index'] = isset($data['transport_index']) ? $data['transport_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets criticality_safety_index
     *
     * @return float|null
     */
    public function getCriticalitySafetyIndex()
    {
        return $this->container['criticality_safety_index'];
    }

    /**
     * Sets criticality_safety_index
     *
     * @param float|null $criticality_safety_index criticality_safety_index
     *
     * @return $this
     */
    public function setCriticalitySafetyIndex($criticality_safety_index)
    {
        $this->container['criticality_safety_index'] = $criticality_safety_index;

        return $this;
    }

    /**
     * Gets radio_active_parcel_dimension
     *
     * @return \pitneybowesShipping\shippingApi.model\RadioActiveParcelDimension|null
     */
    public function getRadioActiveParcelDimension()
    {
        return $this->container['radio_active_parcel_dimension'];
    }

    /**
     * Sets radio_active_parcel_dimension
     *
     * @param \pitneybowesShipping\shippingApi.model\RadioActiveParcelDimension|null $radio_active_parcel_dimension radio_active_parcel_dimension
     *
     * @return $this
     */
    public function setRadioActiveParcelDimension($radio_active_parcel_dimension)
    {
        $this->container['radio_active_parcel_dimension'] = $radio_active_parcel_dimension;

        return $this;
    }

    /**
     * Gets surface_reading
     *
     * @return float|null
     */
    public function getSurfaceReading()
    {
        return $this->container['surface_reading'];
    }

    /**
     * Sets surface_reading
     *
     * @param float|null $surface_reading surface_reading
     *
     * @return $this
     */
    public function setSurfaceReading($surface_reading)
    {
        $this->container['surface_reading'] = $surface_reading;

        return $this;
    }

    /**
     * Gets transport_index
     *
     * @return float|null
     */
    public function getTransportIndex()
    {
        return $this->container['transport_index'];
    }

    /**
     * Sets transport_index
     *
     * @param float|null $transport_index transport_index
     *
     * @return $this
     */
    public function setTransportIndex($transport_index)
    {
        $this->container['transport_index'] = $transport_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


