<?php
/**
 * Manifest
 *
 * PHP version 5
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace pitneybowesShipping\shippingApi.model;

use \ArrayAccess;
use \pitneybowesShipping\ObjectSerializer;

/**
 * Manifest Class Doc Comment
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Manifest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Manifest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier' => 'string',
        'documents' => '\pitneybowesShipping\shippingApi.model\Document[]',
        'from_address' => '\pitneybowesShipping\shippingApi.model\Address',
        'induction_postal_code' => 'string',
        'manifest_id' => 'string',
        'manifest_tracking_number' => 'string',
        'parameters' => '\pitneybowesShipping\shippingApi.model\Parameter[]',
        'parcel_tracking_numbers' => 'string[]',
        'submission_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'carrier' => null,
        'documents' => null,
        'from_address' => null,
        'induction_postal_code' => null,
        'manifest_id' => null,
        'manifest_tracking_number' => null,
        'parameters' => null,
        'parcel_tracking_numbers' => null,
        'submission_date' => 'datetime'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier' => 'carrier',
        'documents' => 'documents',
        'from_address' => 'fromAddress',
        'induction_postal_code' => 'inductionPostalCode',
        'manifest_id' => 'manifestId',
        'manifest_tracking_number' => 'manifestTrackingNumber',
        'parameters' => 'parameters',
        'parcel_tracking_numbers' => 'parcelTrackingNumbers',
        'submission_date' => 'submissionDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier' => 'setCarrier',
        'documents' => 'setDocuments',
        'from_address' => 'setFromAddress',
        'induction_postal_code' => 'setInductionPostalCode',
        'manifest_id' => 'setManifestId',
        'manifest_tracking_number' => 'setManifestTrackingNumber',
        'parameters' => 'setParameters',
        'parcel_tracking_numbers' => 'setParcelTrackingNumbers',
        'submission_date' => 'setSubmissionDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier' => 'getCarrier',
        'documents' => 'getDocuments',
        'from_address' => 'getFromAddress',
        'induction_postal_code' => 'getInductionPostalCode',
        'manifest_id' => 'getManifestId',
        'manifest_tracking_number' => 'getManifestTrackingNumber',
        'parameters' => 'getParameters',
        'parcel_tracking_numbers' => 'getParcelTrackingNumbers',
        'submission_date' => 'getSubmissionDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CARRIER_USPS = 'USPS';
    const CARRIER_NEWGISTICS = 'NEWGISTICS';
    const CARRIER_PB_PRESORT = 'PBPresort';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCarrierAllowableValues()
    {
        return [
            self::CARRIER_USPS,
            self::CARRIER_NEWGISTICS,
            self::CARRIER_PB_PRESORT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['from_address'] = isset($data['from_address']) ? $data['from_address'] : null;
        $this->container['induction_postal_code'] = isset($data['induction_postal_code']) ? $data['induction_postal_code'] : null;
        $this->container['manifest_id'] = isset($data['manifest_id']) ? $data['manifest_id'] : null;
        $this->container['manifest_tracking_number'] = isset($data['manifest_tracking_number']) ? $data['manifest_tracking_number'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['parcel_tracking_numbers'] = isset($data['parcel_tracking_numbers']) ? $data['parcel_tracking_numbers'] : null;
        $this->container['submission_date'] = isset($data['submission_date']) ? $data['submission_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        $allowedValues = $this->getCarrierAllowableValues();
        if (!is_null($this->container['carrier']) && !in_array($this->container['carrier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'carrier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['submission_date'] === null) {
            $invalidProperties[] = "'submission_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $allowedValues = $this->getCarrierAllowableValues();
        if (!in_array($carrier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'carrier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \pitneybowesShipping\shippingApi.model\Document[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \pitneybowesShipping\shippingApi.model\Document[]|null $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets from_address
     *
     * @return \pitneybowesShipping\shippingApi.model\Address|null
     */
    public function getFromAddress()
    {
        return $this->container['from_address'];
    }

    /**
     * Sets from_address
     *
     * @param \pitneybowesShipping\shippingApi.model\Address|null $from_address from_address
     *
     * @return $this
     */
    public function setFromAddress($from_address)
    {
        $this->container['from_address'] = $from_address;

        return $this;
    }

    /**
     * Gets induction_postal_code
     *
     * @return string|null
     */
    public function getInductionPostalCode()
    {
        return $this->container['induction_postal_code'];
    }

    /**
     * Sets induction_postal_code
     *
     * @param string|null $induction_postal_code induction_postal_code
     *
     * @return $this
     */
    public function setInductionPostalCode($induction_postal_code)
    {
        $this->container['induction_postal_code'] = $induction_postal_code;

        return $this;
    }

    /**
     * Gets manifest_id
     *
     * @return string|null
     */
    public function getManifestId()
    {
        return $this->container['manifest_id'];
    }

    /**
     * Sets manifest_id
     *
     * @param string|null $manifest_id manifest_id
     *
     * @return $this
     */
    public function setManifestId($manifest_id)
    {
        $this->container['manifest_id'] = $manifest_id;

        return $this;
    }

    /**
     * Gets manifest_tracking_number
     *
     * @return string|null
     */
    public function getManifestTrackingNumber()
    {
        return $this->container['manifest_tracking_number'];
    }

    /**
     * Sets manifest_tracking_number
     *
     * @param string|null $manifest_tracking_number manifest_tracking_number
     *
     * @return $this
     */
    public function setManifestTrackingNumber($manifest_tracking_number)
    {
        $this->container['manifest_tracking_number'] = $manifest_tracking_number;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \pitneybowesShipping\shippingApi.model\Parameter[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \pitneybowesShipping\shippingApi.model\Parameter[]|null $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets parcel_tracking_numbers
     *
     * @return string[]|null
     */
    public function getParcelTrackingNumbers()
    {
        return $this->container['parcel_tracking_numbers'];
    }

    /**
     * Sets parcel_tracking_numbers
     *
     * @param string[]|null $parcel_tracking_numbers parcel_tracking_numbers
     *
     * @return $this
     */
    public function setParcelTrackingNumbers($parcel_tracking_numbers)
    {
        $this->container['parcel_tracking_numbers'] = $parcel_tracking_numbers;

        return $this;
    }

    /**
     * Gets submission_date
     *
     * @return string
     */
    public function getSubmissionDate()
    {
        return $this->container['submission_date'];
    }

    /**
     * Sets submission_date
     *
     * @param string $submission_date submission_date
     *
     * @return $this
     */
    public function setSubmissionDate($submission_date)
    {
        $this->container['submission_date'] = $submission_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


