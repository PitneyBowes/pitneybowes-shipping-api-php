<?php
/**
 * ParcelProtectionApi
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\PitneyBowes.Developer.ShippingApi;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ParcelProtectionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ParcelProtectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelParcelProtection
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $parcel_protection_reference_id Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionRequest $void_parcel_protection_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors
     */
    public function cancelParcelProtection($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure = true)
    {
        list($response) = $this->cancelParcelProtectionWithHttpInfo($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure);
        return $response;
    }

    /**
     * Operation cancelParcelProtectionWithHttpInfo
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $parcel_protection_reference_id Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionRequest $void_parcel_protection_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelParcelProtectionWithHttpInfo($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure = true)
    {
        $request = $this->cancelParcelProtectionRequest($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelParcelProtectionAsync
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $parcel_protection_reference_id Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionRequest $void_parcel_protection_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelParcelProtectionAsync($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure = true)
    {
        return $this->cancelParcelProtectionAsyncWithHttpInfo($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelParcelProtectionAsyncWithHttpInfo
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $parcel_protection_reference_id Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionRequest $void_parcel_protection_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelParcelProtectionAsyncWithHttpInfo($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure = true)
    {
        $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionResponse';
        $request = $this->cancelParcelProtectionRequest($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelParcelProtection'
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $parcel_protection_reference_id Required. The identifier for the PB Parcel Protection policy that is being voided. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\VoidParcelProtectionRequest $void_parcel_protection_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelParcelProtectionRequest($x_pb_transaction_id, $parcel_protection_reference_id, $void_parcel_protection_request, $x_pb_unified_error_structure = true)
    {
        // verify the required parameter 'x_pb_transaction_id' is set
        if ($x_pb_transaction_id === null || (is_array($x_pb_transaction_id) && count($x_pb_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_pb_transaction_id when calling cancelParcelProtection'
            );
        }
        // verify the required parameter 'parcel_protection_reference_id' is set
        if ($parcel_protection_reference_id === null || (is_array($parcel_protection_reference_id) && count($parcel_protection_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_protection_reference_id when calling cancelParcelProtection'
            );
        }
        // verify the required parameter 'void_parcel_protection_request' is set
        if ($void_parcel_protection_request === null || (is_array($void_parcel_protection_request) && count($void_parcel_protection_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $void_parcel_protection_request when calling cancelParcelProtection'
            );
        }

        $resourcePath = '/v1/parcel-protection/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($parcel_protection_reference_id !== null) {
            if('form' === 'form' && is_array($parcel_protection_reference_id)) {
                foreach($parcel_protection_reference_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parcelProtectionReferenceId'] = $parcel_protection_reference_id;
            }
        }

        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }
        // header params
        if ($x_pb_transaction_id !== null) {
            $headerParams['X-PB-TransactionId'] = ObjectSerializer::toHeaderValue($x_pb_transaction_id);
        }


        // body params
        $_tempBody = null;
        if (isset($void_parcel_protection_request)) {
            $_tempBody = $void_parcel_protection_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelProtectionCoverage
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateRequest $parcel_protection_create_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors
     */
    public function getParcelProtectionCoverage($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure = true)
    {
        list($response) = $this->getParcelProtectionCoverageWithHttpInfo($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure);
        return $response;
    }

    /**
     * Operation getParcelProtectionCoverageWithHttpInfo
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateRequest $parcel_protection_create_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelProtectionCoverageWithHttpInfo($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure = true)
    {
        $request = $this->getParcelProtectionCoverageRequest($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelProtectionCoverageAsync
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateRequest $parcel_protection_create_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelProtectionCoverageAsync($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure = true)
    {
        return $this->getParcelProtectionCoverageAsyncWithHttpInfo($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelProtectionCoverageAsyncWithHttpInfo
     *
     * Parcel Protection Coverage
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateRequest $parcel_protection_create_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelProtectionCoverageAsyncWithHttpInfo($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure = true)
    {
        $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateResponse';
        $request = $this->getParcelProtectionCoverageRequest($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelProtectionCoverage'
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionCreateRequest $parcel_protection_create_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelProtectionCoverageRequest($x_pb_transaction_id, $parcel_protection_create_request, $x_pb_unified_error_structure = true)
    {
        // verify the required parameter 'x_pb_transaction_id' is set
        if ($x_pb_transaction_id === null || (is_array($x_pb_transaction_id) && count($x_pb_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_pb_transaction_id when calling getParcelProtectionCoverage'
            );
        }
        // verify the required parameter 'parcel_protection_create_request' is set
        if ($parcel_protection_create_request === null || (is_array($parcel_protection_create_request) && count($parcel_protection_create_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_protection_create_request when calling getParcelProtectionCoverage'
            );
        }

        $resourcePath = '/v1/parcel-protection/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }
        // header params
        if ($x_pb_transaction_id !== null) {
            $headerParams['X-PB-TransactionId'] = ObjectSerializer::toHeaderValue($x_pb_transaction_id);
        }


        // body params
        $_tempBody = null;
        if (isset($parcel_protection_create_request)) {
            $_tempBody = $parcel_protection_create_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelProtectionQuote
     *
     * Parcel Protection Quote
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteRequest $parcel_protection_quote_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors
     */
    public function getParcelProtectionQuote($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure = true)
    {
        list($response) = $this->getParcelProtectionQuoteWithHttpInfo($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure);
        return $response;
    }

    /**
     * Operation getParcelProtectionQuoteWithHttpInfo
     *
     * Parcel Protection Quote
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteRequest $parcel_protection_quote_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelProtectionQuoteWithHttpInfo($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure = true)
    {
        $request = $this->getParcelProtectionQuoteRequest($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelProtectionQuoteAsync
     *
     * Parcel Protection Quote
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteRequest $parcel_protection_quote_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelProtectionQuoteAsync($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure = true)
    {
        return $this->getParcelProtectionQuoteAsyncWithHttpInfo($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelProtectionQuoteAsyncWithHttpInfo
     *
     * Parcel Protection Quote
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteRequest $parcel_protection_quote_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelProtectionQuoteAsyncWithHttpInfo($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure = true)
    {
        $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteResponse';
        $request = $this->getParcelProtectionQuoteRequest($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelProtectionQuote'
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionQuoteRequest $parcel_protection_quote_request manifest (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelProtectionQuoteRequest($x_pb_transaction_id, $parcel_protection_quote_request, $x_pb_unified_error_structure = true)
    {
        // verify the required parameter 'x_pb_transaction_id' is set
        if ($x_pb_transaction_id === null || (is_array($x_pb_transaction_id) && count($x_pb_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_pb_transaction_id when calling getParcelProtectionQuote'
            );
        }
        // verify the required parameter 'parcel_protection_quote_request' is set
        if ($parcel_protection_quote_request === null || (is_array($parcel_protection_quote_request) && count($parcel_protection_quote_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parcel_protection_quote_request when calling getParcelProtectionQuote'
            );
        }

        $resourcePath = '/v1/parcel-protection/quote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }
        // header params
        if ($x_pb_transaction_id !== null) {
            $headerParams['X-PB-TransactionId'] = ObjectSerializer::toHeaderValue($x_pb_transaction_id);
        }


        // body params
        $_tempBody = null;
        if (isset($parcel_protection_quote_request)) {
            $_tempBody = $parcel_protection_quote_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcelProtectionReports
     *
     * Parcel Protection Reports
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $developer_id Required. Your Pitney Bowes developer ID. (required)
     * @param  string $policy_created_from_date The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $policy_created_to_date The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (optional)
     * @param  string $policy_reference_id The unique identifier for the PB Parcel Protection policy.]. (optional)
     * @param  string $parcel_tracking_number The parcel tracking number of the shipment that the policy applies to. (optional)
     * @param  string $merchant_id The merchant&#39;s Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object. (optional)
     * @param  string $policy_status Whether the policy is active or voided. (optional)
     * @param  string $size The number of transactions to return per page in the result set. (optional)
     * @param  string $page The index number of the page to return. Page index numbering starts at 0. Specifying page&#x3D;0 returns the first page of the result set. (optional)
     * @param  string $sort Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors
     */
    public function getParcelProtectionReports($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure = true, $policy_created_to_date = null, $policy_reference_id = null, $parcel_tracking_number = null, $merchant_id = null, $policy_status = null, $size = null, $page = null, $sort = null)
    {
        list($response) = $this->getParcelProtectionReportsWithHttpInfo($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure, $policy_created_to_date, $policy_reference_id, $parcel_tracking_number, $merchant_id, $policy_status, $size, $page, $sort);
        return $response;
    }

    /**
     * Operation getParcelProtectionReportsWithHttpInfo
     *
     * Parcel Protection Reports
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $developer_id Required. Your Pitney Bowes developer ID. (required)
     * @param  string $policy_created_from_date The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $policy_created_to_date The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (optional)
     * @param  string $policy_reference_id The unique identifier for the PB Parcel Protection policy.]. (optional)
     * @param  string $parcel_tracking_number The parcel tracking number of the shipment that the policy applies to. (optional)
     * @param  string $merchant_id The merchant&#39;s Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object. (optional)
     * @param  string $policy_status Whether the policy is active or voided. (optional)
     * @param  string $size The number of transactions to return per page in the result set. (optional)
     * @param  string $page The index number of the page to return. Page index numbering starts at 0. Specifying page&#x3D;0 returns the first page of the result set. (optional)
     * @param  string $sort Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse|\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcelProtectionReportsWithHttpInfo($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure = true, $policy_created_to_date = null, $policy_reference_id = null, $parcel_tracking_number = null, $merchant_id = null, $policy_status = null, $size = null, $page = null, $sort = null)
    {
        $request = $this->getParcelProtectionReportsRequest($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure, $policy_created_to_date, $policy_reference_id, $parcel_tracking_number, $merchant_id, $policy_status, $size, $page, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcelProtectionReportsAsync
     *
     * Parcel Protection Reports
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $developer_id Required. Your Pitney Bowes developer ID. (required)
     * @param  string $policy_created_from_date The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $policy_created_to_date The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (optional)
     * @param  string $policy_reference_id The unique identifier for the PB Parcel Protection policy.]. (optional)
     * @param  string $parcel_tracking_number The parcel tracking number of the shipment that the policy applies to. (optional)
     * @param  string $merchant_id The merchant&#39;s Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object. (optional)
     * @param  string $policy_status Whether the policy is active or voided. (optional)
     * @param  string $size The number of transactions to return per page in the result set. (optional)
     * @param  string $page The index number of the page to return. Page index numbering starts at 0. Specifying page&#x3D;0 returns the first page of the result set. (optional)
     * @param  string $sort Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelProtectionReportsAsync($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure = true, $policy_created_to_date = null, $policy_reference_id = null, $parcel_tracking_number = null, $merchant_id = null, $policy_status = null, $size = null, $page = null, $sort = null)
    {
        return $this->getParcelProtectionReportsAsyncWithHttpInfo($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure, $policy_created_to_date, $policy_reference_id, $parcel_tracking_number, $merchant_id, $policy_status, $size, $page, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcelProtectionReportsAsyncWithHttpInfo
     *
     * Parcel Protection Reports
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $developer_id Required. Your Pitney Bowes developer ID. (required)
     * @param  string $policy_created_from_date The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $policy_created_to_date The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (optional)
     * @param  string $policy_reference_id The unique identifier for the PB Parcel Protection policy.]. (optional)
     * @param  string $parcel_tracking_number The parcel tracking number of the shipment that the policy applies to. (optional)
     * @param  string $merchant_id The merchant&#39;s Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object. (optional)
     * @param  string $policy_status Whether the policy is active or voided. (optional)
     * @param  string $size The number of transactions to return per page in the result set. (optional)
     * @param  string $page The index number of the page to return. Page index numbering starts at 0. Specifying page&#x3D;0 returns the first page of the result set. (optional)
     * @param  string $sort Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcelProtectionReportsAsyncWithHttpInfo($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure = true, $policy_created_to_date = null, $policy_reference_id = null, $parcel_tracking_number = null, $merchant_id = null, $policy_status = null, $size = null, $page = null, $sort = null)
    {
        $returnType = '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\ParcelProtectionPolicyResponse';
        $request = $this->getParcelProtectionReportsRequest($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure, $policy_created_to_date, $policy_reference_id, $parcel_tracking_number, $merchant_id, $policy_status, $size, $page, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcelProtectionReports'
     *
     * @param  string $x_pb_transaction_id Required. A unique identifier for the transaction, up to 25 characters. (required)
     * @param  string $developer_id Required. Your Pitney Bowes developer ID. (required)
     * @param  string $policy_created_from_date The beginning of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $policy_created_to_date The end of the date range. Specify this value in UTC using the ISO 8601 standard. You must include both date and time, and you must end the time with Z to indicate a zero offset. (optional)
     * @param  string $policy_reference_id The unique identifier for the PB Parcel Protection policy.]. (optional)
     * @param  string $parcel_tracking_number The parcel tracking number of the shipment that the policy applies to. (optional)
     * @param  string $merchant_id The merchant&#39;s Shipper ID. This is the value of the postalReportingNumber element in the Merchant Object. (optional)
     * @param  string $policy_status Whether the policy is active or voided. (optional)
     * @param  string $size The number of transactions to return per page in the result set. (optional)
     * @param  string $page The index number of the page to return. Page index numbering starts at 0. Specifying page&#x3D;0 returns the first page of the result set. (optional)
     * @param  string $sort Defines a property to sort on and the sort order. Sort order can be ascending (asc) or descending (desc). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcelProtectionReportsRequest($x_pb_transaction_id, $developer_id, $policy_created_from_date, $x_pb_unified_error_structure = true, $policy_created_to_date = null, $policy_reference_id = null, $parcel_tracking_number = null, $merchant_id = null, $policy_status = null, $size = null, $page = null, $sort = null)
    {
        // verify the required parameter 'x_pb_transaction_id' is set
        if ($x_pb_transaction_id === null || (is_array($x_pb_transaction_id) && count($x_pb_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_pb_transaction_id when calling getParcelProtectionReports'
            );
        }
        // verify the required parameter 'developer_id' is set
        if ($developer_id === null || (is_array($developer_id) && count($developer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $developer_id when calling getParcelProtectionReports'
            );
        }
        // verify the required parameter 'policy_created_from_date' is set
        if ($policy_created_from_date === null || (is_array($policy_created_from_date) && count($policy_created_from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_created_from_date when calling getParcelProtectionReports'
            );
        }

        $resourcePath = '/v1/parcel-protection/{developerId}/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($policy_created_from_date !== null) {
            if('form' === 'form' && is_array($policy_created_from_date)) {
                foreach($policy_created_from_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['policyCreatedFromDate'] = $policy_created_from_date;
            }
        }
        // query params
        if ($policy_created_to_date !== null) {
            if('form' === 'form' && is_array($policy_created_to_date)) {
                foreach($policy_created_to_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['policyCreatedToDate'] = $policy_created_to_date;
            }
        }
        // query params
        if ($policy_reference_id !== null) {
            if('form' === 'form' && is_array($policy_reference_id)) {
                foreach($policy_reference_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['policyReferenceId'] = $policy_reference_id;
            }
        }
        // query params
        if ($parcel_tracking_number !== null) {
            if('form' === 'form' && is_array($parcel_tracking_number)) {
                foreach($parcel_tracking_number as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parcelTrackingNumber'] = $parcel_tracking_number;
            }
        }
        // query params
        if ($merchant_id !== null) {
            if('form' === 'form' && is_array($merchant_id)) {
                foreach($merchant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantId'] = $merchant_id;
            }
        }
        // query params
        if ($policy_status !== null) {
            if('form' === 'form' && is_array($policy_status)) {
                foreach($policy_status as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['policyStatus'] = $policy_status;
            }
        }
        // query params
        if ($size !== null) {
            if('form' === 'form' && is_array($size)) {
                foreach($size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['size'] = $size;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }

        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }
        // header params
        if ($x_pb_transaction_id !== null) {
            $headerParams['X-PB-TransactionId'] = ObjectSerializer::toHeaderValue($x_pb_transaction_id);
        }

        // path params
        if ($developer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'developerId' . '}',
                ObjectSerializer::toPathValue($developer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
