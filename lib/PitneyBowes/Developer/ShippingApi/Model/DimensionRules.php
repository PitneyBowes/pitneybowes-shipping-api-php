<?php
/**
 * DimensionRules
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DimensionRules Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DimensionRules implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DimensionRules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'required' => 'bool',
        'unit_of_measurement' => 'string',
        'min_parcel_dimensions' => '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\DimensionRulesMinParcelDimensions',
        'max_parcel_dimensions' => '\OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\DimensionRulesMaxParcelDimensions',
        'min_length_plus_girth' => 'int',
        'max_length_plus_girth' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'required' => null,
        'unit_of_measurement' => null,
        'min_parcel_dimensions' => null,
        'max_parcel_dimensions' => null,
        'min_length_plus_girth' => null,
        'max_length_plus_girth' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'required' => 'required',
        'unit_of_measurement' => 'unitOfMeasurement',
        'min_parcel_dimensions' => 'minParcelDimensions',
        'max_parcel_dimensions' => 'maxParcelDimensions',
        'min_length_plus_girth' => 'minLengthPlusGirth',
        'max_length_plus_girth' => 'maxLengthPlusGirth'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'required' => 'setRequired',
        'unit_of_measurement' => 'setUnitOfMeasurement',
        'min_parcel_dimensions' => 'setMinParcelDimensions',
        'max_parcel_dimensions' => 'setMaxParcelDimensions',
        'min_length_plus_girth' => 'setMinLengthPlusGirth',
        'max_length_plus_girth' => 'setMaxLengthPlusGirth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'required' => 'getRequired',
        'unit_of_measurement' => 'getUnitOfMeasurement',
        'min_parcel_dimensions' => 'getMinParcelDimensions',
        'max_parcel_dimensions' => 'getMaxParcelDimensions',
        'min_length_plus_girth' => 'getMinLengthPlusGirth',
        'max_length_plus_girth' => 'getMaxLengthPlusGirth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
        $this->container['unit_of_measurement'] = isset($data['unit_of_measurement']) ? $data['unit_of_measurement'] : null;
        $this->container['min_parcel_dimensions'] = isset($data['min_parcel_dimensions']) ? $data['min_parcel_dimensions'] : null;
        $this->container['max_parcel_dimensions'] = isset($data['max_parcel_dimensions']) ? $data['max_parcel_dimensions'] : null;
        $this->container['min_length_plus_girth'] = isset($data['min_length_plus_girth']) ? $data['min_length_plus_girth'] : null;
        $this->container['max_length_plus_girth'] = isset($data['max_length_plus_girth']) ? $data['max_length_plus_girth'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets unit_of_measurement
     *
     * @return string|null
     */
    public function getUnitOfMeasurement()
    {
        return $this->container['unit_of_measurement'];
    }

    /**
     * Sets unit_of_measurement
     *
     * @param string|null $unit_of_measurement unit_of_measurement
     *
     * @return $this
     */
    public function setUnitOfMeasurement($unit_of_measurement)
    {
        $this->container['unit_of_measurement'] = $unit_of_measurement;

        return $this;
    }

    /**
     * Gets min_parcel_dimensions
     *
     * @return \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\DimensionRulesMinParcelDimensions|null
     */
    public function getMinParcelDimensions()
    {
        return $this->container['min_parcel_dimensions'];
    }

    /**
     * Sets min_parcel_dimensions
     *
     * @param \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\DimensionRulesMinParcelDimensions|null $min_parcel_dimensions min_parcel_dimensions
     *
     * @return $this
     */
    public function setMinParcelDimensions($min_parcel_dimensions)
    {
        $this->container['min_parcel_dimensions'] = $min_parcel_dimensions;

        return $this;
    }

    /**
     * Gets max_parcel_dimensions
     *
     * @return \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\DimensionRulesMaxParcelDimensions|null
     */
    public function getMaxParcelDimensions()
    {
        return $this->container['max_parcel_dimensions'];
    }

    /**
     * Sets max_parcel_dimensions
     *
     * @param \OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model\DimensionRulesMaxParcelDimensions|null $max_parcel_dimensions max_parcel_dimensions
     *
     * @return $this
     */
    public function setMaxParcelDimensions($max_parcel_dimensions)
    {
        $this->container['max_parcel_dimensions'] = $max_parcel_dimensions;

        return $this;
    }

    /**
     * Gets min_length_plus_girth
     *
     * @return int|null
     */
    public function getMinLengthPlusGirth()
    {
        return $this->container['min_length_plus_girth'];
    }

    /**
     * Sets min_length_plus_girth
     *
     * @param int|null $min_length_plus_girth min_length_plus_girth
     *
     * @return $this
     */
    public function setMinLengthPlusGirth($min_length_plus_girth)
    {
        $this->container['min_length_plus_girth'] = $min_length_plus_girth;

        return $this;
    }

    /**
     * Gets max_length_plus_girth
     *
     * @return int|null
     */
    public function getMaxLengthPlusGirth()
    {
        return $this->container['max_length_plus_girth'];
    }

    /**
     * Sets max_length_plus_girth
     *
     * @param int|null $max_length_plus_girth max_length_plus_girth
     *
     * @return $this
     */
    public function setMaxLengthPlusGirth($max_length_plus_girth)
    {
        $this->container['max_length_plus_girth'] = $max_length_plus_girth;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


