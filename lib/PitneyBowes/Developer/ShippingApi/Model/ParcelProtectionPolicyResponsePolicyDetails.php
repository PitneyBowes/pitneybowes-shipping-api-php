<?php
/**
 * ParcelProtectionPolicyResponsePolicyDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ParcelProtectionPolicyResponsePolicyDetails Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ParcelProtectionPolicyResponsePolicyDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ParcelProtectionPolicyResponse_policyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'policy_id' => 'string',
        'policy_date' => 'string',
        'policy_status' => 'string',
        'claim_status' => 'string',
        'claim_status_update_date' => 'string',
        'value_of_goods' => 'float',
        'insurance_value' => 'float',
        'premium_value' => 'float',
        'base_premium' => 'float',
        'technology_fee' => 'float',
        'currency_code' => 'string',
        'mail_class' => 'string',
        'mail_class_option' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'policy_id' => null,
        'policy_date' => null,
        'policy_status' => null,
        'claim_status' => null,
        'claim_status_update_date' => null,
        'value_of_goods' => null,
        'insurance_value' => null,
        'premium_value' => null,
        'base_premium' => null,
        'technology_fee' => null,
        'currency_code' => null,
        'mail_class' => null,
        'mail_class_option' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'policy_id' => 'policyId',
        'policy_date' => 'policyDate',
        'policy_status' => 'policyStatus',
        'claim_status' => 'claimStatus',
        'claim_status_update_date' => 'claimStatusUpdateDate',
        'value_of_goods' => 'valueOfGoods',
        'insurance_value' => 'insuranceValue',
        'premium_value' => 'premiumValue',
        'base_premium' => 'basePremium',
        'technology_fee' => 'technologyFee',
        'currency_code' => 'currencyCode',
        'mail_class' => 'mailClass',
        'mail_class_option' => 'mailClassOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'policy_id' => 'setPolicyId',
        'policy_date' => 'setPolicyDate',
        'policy_status' => 'setPolicyStatus',
        'claim_status' => 'setClaimStatus',
        'claim_status_update_date' => 'setClaimStatusUpdateDate',
        'value_of_goods' => 'setValueOfGoods',
        'insurance_value' => 'setInsuranceValue',
        'premium_value' => 'setPremiumValue',
        'base_premium' => 'setBasePremium',
        'technology_fee' => 'setTechnologyFee',
        'currency_code' => 'setCurrencyCode',
        'mail_class' => 'setMailClass',
        'mail_class_option' => 'setMailClassOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'policy_id' => 'getPolicyId',
        'policy_date' => 'getPolicyDate',
        'policy_status' => 'getPolicyStatus',
        'claim_status' => 'getClaimStatus',
        'claim_status_update_date' => 'getClaimStatusUpdateDate',
        'value_of_goods' => 'getValueOfGoods',
        'insurance_value' => 'getInsuranceValue',
        'premium_value' => 'getPremiumValue',
        'base_premium' => 'getBasePremium',
        'technology_fee' => 'getTechnologyFee',
        'currency_code' => 'getCurrencyCode',
        'mail_class' => 'getMailClass',
        'mail_class_option' => 'getMailClassOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['policy_id'] = isset($data['policy_id']) ? $data['policy_id'] : null;
        $this->container['policy_date'] = isset($data['policy_date']) ? $data['policy_date'] : null;
        $this->container['policy_status'] = isset($data['policy_status']) ? $data['policy_status'] : null;
        $this->container['claim_status'] = isset($data['claim_status']) ? $data['claim_status'] : null;
        $this->container['claim_status_update_date'] = isset($data['claim_status_update_date']) ? $data['claim_status_update_date'] : null;
        $this->container['value_of_goods'] = isset($data['value_of_goods']) ? $data['value_of_goods'] : null;
        $this->container['insurance_value'] = isset($data['insurance_value']) ? $data['insurance_value'] : null;
        $this->container['premium_value'] = isset($data['premium_value']) ? $data['premium_value'] : null;
        $this->container['base_premium'] = isset($data['base_premium']) ? $data['base_premium'] : null;
        $this->container['technology_fee'] = isset($data['technology_fee']) ? $data['technology_fee'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['mail_class'] = isset($data['mail_class']) ? $data['mail_class'] : null;
        $this->container['mail_class_option'] = isset($data['mail_class_option']) ? $data['mail_class_option'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets policy_id
     *
     * @return string|null
     */
    public function getPolicyId()
    {
        return $this->container['policy_id'];
    }

    /**
     * Sets policy_id
     *
     * @param string|null $policy_id policy_id
     *
     * @return $this
     */
    public function setPolicyId($policy_id)
    {
        $this->container['policy_id'] = $policy_id;

        return $this;
    }

    /**
     * Gets policy_date
     *
     * @return string|null
     */
    public function getPolicyDate()
    {
        return $this->container['policy_date'];
    }

    /**
     * Sets policy_date
     *
     * @param string|null $policy_date policy_date
     *
     * @return $this
     */
    public function setPolicyDate($policy_date)
    {
        $this->container['policy_date'] = $policy_date;

        return $this;
    }

    /**
     * Gets policy_status
     *
     * @return string|null
     */
    public function getPolicyStatus()
    {
        return $this->container['policy_status'];
    }

    /**
     * Sets policy_status
     *
     * @param string|null $policy_status policy_status
     *
     * @return $this
     */
    public function setPolicyStatus($policy_status)
    {
        $this->container['policy_status'] = $policy_status;

        return $this;
    }

    /**
     * Gets claim_status
     *
     * @return string|null
     */
    public function getClaimStatus()
    {
        return $this->container['claim_status'];
    }

    /**
     * Sets claim_status
     *
     * @param string|null $claim_status claim_status
     *
     * @return $this
     */
    public function setClaimStatus($claim_status)
    {
        $this->container['claim_status'] = $claim_status;

        return $this;
    }

    /**
     * Gets claim_status_update_date
     *
     * @return string|null
     */
    public function getClaimStatusUpdateDate()
    {
        return $this->container['claim_status_update_date'];
    }

    /**
     * Sets claim_status_update_date
     *
     * @param string|null $claim_status_update_date claim_status_update_date
     *
     * @return $this
     */
    public function setClaimStatusUpdateDate($claim_status_update_date)
    {
        $this->container['claim_status_update_date'] = $claim_status_update_date;

        return $this;
    }

    /**
     * Gets value_of_goods
     *
     * @return float|null
     */
    public function getValueOfGoods()
    {
        return $this->container['value_of_goods'];
    }

    /**
     * Sets value_of_goods
     *
     * @param float|null $value_of_goods value_of_goods
     *
     * @return $this
     */
    public function setValueOfGoods($value_of_goods)
    {
        $this->container['value_of_goods'] = $value_of_goods;

        return $this;
    }

    /**
     * Gets insurance_value
     *
     * @return float|null
     */
    public function getInsuranceValue()
    {
        return $this->container['insurance_value'];
    }

    /**
     * Sets insurance_value
     *
     * @param float|null $insurance_value insurance_value
     *
     * @return $this
     */
    public function setInsuranceValue($insurance_value)
    {
        $this->container['insurance_value'] = $insurance_value;

        return $this;
    }

    /**
     * Gets premium_value
     *
     * @return float|null
     */
    public function getPremiumValue()
    {
        return $this->container['premium_value'];
    }

    /**
     * Sets premium_value
     *
     * @param float|null $premium_value premium_value
     *
     * @return $this
     */
    public function setPremiumValue($premium_value)
    {
        $this->container['premium_value'] = $premium_value;

        return $this;
    }

    /**
     * Gets base_premium
     *
     * @return float|null
     */
    public function getBasePremium()
    {
        return $this->container['base_premium'];
    }

    /**
     * Sets base_premium
     *
     * @param float|null $base_premium base_premium
     *
     * @return $this
     */
    public function setBasePremium($base_premium)
    {
        $this->container['base_premium'] = $base_premium;

        return $this;
    }

    /**
     * Gets technology_fee
     *
     * @return float|null
     */
    public function getTechnologyFee()
    {
        return $this->container['technology_fee'];
    }

    /**
     * Sets technology_fee
     *
     * @param float|null $technology_fee technology_fee
     *
     * @return $this
     */
    public function setTechnologyFee($technology_fee)
    {
        $this->container['technology_fee'] = $technology_fee;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets mail_class
     *
     * @return string|null
     */
    public function getMailClass()
    {
        return $this->container['mail_class'];
    }

    /**
     * Sets mail_class
     *
     * @param string|null $mail_class mail_class
     *
     * @return $this
     */
    public function setMailClass($mail_class)
    {
        $this->container['mail_class'] = $mail_class;

        return $this;
    }

    /**
     * Gets mail_class_option
     *
     * @return string|null
     */
    public function getMailClassOption()
    {
        return $this->container['mail_class_option'];
    }

    /**
     * Sets mail_class_option
     *
     * @param string|null $mail_class_option mail_class_option
     *
     * @return $this
     */
    public function setMailClassOption($mail_class_option)
    {
        $this->container['mail_class_option'] = $mail_class_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


