<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_lines' => 'string[]',
        'carrier_route' => 'string',
        'city_town' => 'string',
        'company' => 'string',
        'country_code' => 'string',
        'delivery_point' => 'string',
        'email' => 'string',
        'name' => 'string',
        'phone' => 'string',
        'postal_code' => 'string',
        'residential' => 'bool',
        'state_province' => 'string',
        'status' => 'string',
        'tax_id' => 'string',
        'tax_id_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'address_lines' => null,
        'carrier_route' => null,
        'city_town' => null,
        'company' => null,
        'country_code' => null,
        'delivery_point' => null,
        'email' => null,
        'name' => null,
        'phone' => null,
        'postal_code' => null,
        'residential' => null,
        'state_province' => null,
        'status' => null,
        'tax_id' => null,
        'tax_id_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_lines' => 'addressLines',
        'carrier_route' => 'carrierRoute',
        'city_town' => 'cityTown',
        'company' => 'company',
        'country_code' => 'countryCode',
        'delivery_point' => 'deliveryPoint',
        'email' => 'email',
        'name' => 'name',
        'phone' => 'phone',
        'postal_code' => 'postalCode',
        'residential' => 'residential',
        'state_province' => 'stateProvince',
        'status' => 'status',
        'tax_id' => 'taxId',
        'tax_id_type' => 'taxIdType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_lines' => 'setAddressLines',
        'carrier_route' => 'setCarrierRoute',
        'city_town' => 'setCityTown',
        'company' => 'setCompany',
        'country_code' => 'setCountryCode',
        'delivery_point' => 'setDeliveryPoint',
        'email' => 'setEmail',
        'name' => 'setName',
        'phone' => 'setPhone',
        'postal_code' => 'setPostalCode',
        'residential' => 'setResidential',
        'state_province' => 'setStateProvince',
        'status' => 'setStatus',
        'tax_id' => 'setTaxId',
        'tax_id_type' => 'setTaxIdType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_lines' => 'getAddressLines',
        'carrier_route' => 'getCarrierRoute',
        'city_town' => 'getCityTown',
        'company' => 'getCompany',
        'country_code' => 'getCountryCode',
        'delivery_point' => 'getDeliveryPoint',
        'email' => 'getEmail',
        'name' => 'getName',
        'phone' => 'getPhone',
        'postal_code' => 'getPostalCode',
        'residential' => 'getResidential',
        'state_province' => 'getStateProvince',
        'status' => 'getStatus',
        'tax_id' => 'getTaxId',
        'tax_id_type' => 'getTaxIdType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_PARSED = 'PARSED';
    const STATUS_VALIDATED_CHANGED = 'VALIDATED_CHANGED';
    const STATUS_VALIDATED_AND_NOT_CHANGED = 'VALIDATED_AND_NOT_CHANGED';
    const STATUS_NOT_CHANGED = 'NOT_CHANGED';
    const TAX_ID_TYPE_EIN = 'EIN';
    const TAX_ID_TYPE_GST = 'GST';
    const TAX_ID_TYPE_VAT = 'VAT';
    const TAX_ID_TYPE_RFC = 'RFC';
    const TAX_ID_TYPE_EORI = 'EORI';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PARSED,
            self::STATUS_VALIDATED_CHANGED,
            self::STATUS_VALIDATED_AND_NOT_CHANGED,
            self::STATUS_NOT_CHANGED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxIdTypeAllowableValues()
    {
        return [
            self::TAX_ID_TYPE_EIN,
            self::TAX_ID_TYPE_GST,
            self::TAX_ID_TYPE_VAT,
            self::TAX_ID_TYPE_RFC,
            self::TAX_ID_TYPE_EORI,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_lines'] = isset($data['address_lines']) ? $data['address_lines'] : null;
        $this->container['carrier_route'] = isset($data['carrier_route']) ? $data['carrier_route'] : null;
        $this->container['city_town'] = isset($data['city_town']) ? $data['city_town'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['delivery_point'] = isset($data['delivery_point']) ? $data['delivery_point'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['residential'] = isset($data['residential']) ? $data['residential'] : null;
        $this->container['state_province'] = isset($data['state_province']) ? $data['state_province'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['tax_id_type'] = isset($data['tax_id_type']) ? $data['tax_id_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxIdTypeAllowableValues();
        if (!is_null($this->container['tax_id_type']) && !in_array($this->container['tax_id_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_id_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_lines
     *
     * @return string[]|null
     */
    public function getAddressLines()
    {
        return $this->container['address_lines'];
    }

    /**
     * Sets address_lines
     *
     * @param string[]|null $address_lines address_lines
     *
     * @return $this
     */
    public function setAddressLines($address_lines)
    {
        $this->container['address_lines'] = $address_lines;

        return $this;
    }

    /**
     * Gets carrier_route
     *
     * @return string|null
     */
    public function getCarrierRoute()
    {
        return $this->container['carrier_route'];
    }

    /**
     * Sets carrier_route
     *
     * @param string|null $carrier_route carrier_route
     *
     * @return $this
     */
    public function setCarrierRoute($carrier_route)
    {
        $this->container['carrier_route'] = $carrier_route;

        return $this;
    }

    /**
     * Gets city_town
     *
     * @return string|null
     */
    public function getCityTown()
    {
        return $this->container['city_town'];
    }

    /**
     * Sets city_town
     *
     * @param string|null $city_town city_town
     *
     * @return $this
     */
    public function setCityTown($city_town)
    {
        $this->container['city_town'] = $city_town;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code 2-character country code (ISO-3166-1 alpha-2)
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets delivery_point
     *
     * @return string|null
     */
    public function getDeliveryPoint()
    {
        return $this->container['delivery_point'];
    }

    /**
     * Sets delivery_point
     *
     * @param string|null $delivery_point delivery_point
     *
     * @return $this
     */
    public function setDeliveryPoint($delivery_point)
    {
        $this->container['delivery_point'] = $delivery_point;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets residential
     *
     * @return bool|null
     */
    public function getResidential()
    {
        return $this->container['residential'];
    }

    /**
     * Sets residential
     *
     * @param bool|null $residential residential
     *
     * @return $this
     */
    public function setResidential($residential)
    {
        $this->container['residential'] = $residential;

        return $this;
    }

    /**
     * Gets state_province
     *
     * @return string|null
     */
    public function getStateProvince()
    {
        return $this->container['state_province'];
    }

    /**
     * Sets state_province
     *
     * @param string|null $state_province state_province
     *
     * @return $this
     */
    public function setStateProvince($state_province)
    {
        $this->container['state_province'] = $state_province;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tax_id
     *
     * @return string|null
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string|null $tax_id tax_id
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets tax_id_type
     *
     * @return string|null
     */
    public function getTaxIdType()
    {
        return $this->container['tax_id_type'];
    }

    /**
     * Sets tax_id_type
     *
     * @param string|null $tax_id_type tax_id_type
     *
     * @return $this
     */
    public function setTaxIdType($tax_id_type)
    {
        $allowedValues = $this->getTaxIdTypeAllowableValues();
        if (!is_null($tax_id_type) && !in_array($tax_id_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_id_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_id_type'] = $tax_id_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


