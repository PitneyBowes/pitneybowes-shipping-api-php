<?php
/**
 * RadioNuclideDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\PitneyBowes.Developer.ShippingApi.Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RadioNuclideDetail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RadioNuclideDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RadioNuclideDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chemical_form' => 'string',
        'expected_package_reportable_quantity' => 'bool',
        'physical_form' => 'string',
        'radio_nuclide' => 'string',
        'radio_nuclide_activity_uom' => 'string',
        'radio_nuclide_activity_value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'chemical_form' => null,
        'expected_package_reportable_quantity' => null,
        'physical_form' => null,
        'radio_nuclide' => null,
        'radio_nuclide_activity_uom' => null,
        'radio_nuclide_activity_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chemical_form' => 'chemicalForm',
        'expected_package_reportable_quantity' => 'expectedPackageReportableQuantity',
        'physical_form' => 'physicalForm',
        'radio_nuclide' => 'radioNuclide',
        'radio_nuclide_activity_uom' => 'radioNuclideActivityUOM',
        'radio_nuclide_activity_value' => 'radioNuclideActivityValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chemical_form' => 'setChemicalForm',
        'expected_package_reportable_quantity' => 'setExpectedPackageReportableQuantity',
        'physical_form' => 'setPhysicalForm',
        'radio_nuclide' => 'setRadioNuclide',
        'radio_nuclide_activity_uom' => 'setRadioNuclideActivityUom',
        'radio_nuclide_activity_value' => 'setRadioNuclideActivityValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chemical_form' => 'getChemicalForm',
        'expected_package_reportable_quantity' => 'getExpectedPackageReportableQuantity',
        'physical_form' => 'getPhysicalForm',
        'radio_nuclide' => 'getRadioNuclide',
        'radio_nuclide_activity_uom' => 'getRadioNuclideActivityUom',
        'radio_nuclide_activity_value' => 'getRadioNuclideActivityValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chemical_form'] = isset($data['chemical_form']) ? $data['chemical_form'] : null;
        $this->container['expected_package_reportable_quantity'] = isset($data['expected_package_reportable_quantity']) ? $data['expected_package_reportable_quantity'] : null;
        $this->container['physical_form'] = isset($data['physical_form']) ? $data['physical_form'] : null;
        $this->container['radio_nuclide'] = isset($data['radio_nuclide']) ? $data['radio_nuclide'] : null;
        $this->container['radio_nuclide_activity_uom'] = isset($data['radio_nuclide_activity_uom']) ? $data['radio_nuclide_activity_uom'] : null;
        $this->container['radio_nuclide_activity_value'] = isset($data['radio_nuclide_activity_value']) ? $data['radio_nuclide_activity_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chemical_form
     *
     * @return string|null
     */
    public function getChemicalForm()
    {
        return $this->container['chemical_form'];
    }

    /**
     * Sets chemical_form
     *
     * @param string|null $chemical_form chemical_form
     *
     * @return $this
     */
    public function setChemicalForm($chemical_form)
    {
        $this->container['chemical_form'] = $chemical_form;

        return $this;
    }

    /**
     * Gets expected_package_reportable_quantity
     *
     * @return bool|null
     */
    public function getExpectedPackageReportableQuantity()
    {
        return $this->container['expected_package_reportable_quantity'];
    }

    /**
     * Sets expected_package_reportable_quantity
     *
     * @param bool|null $expected_package_reportable_quantity expected_package_reportable_quantity
     *
     * @return $this
     */
    public function setExpectedPackageReportableQuantity($expected_package_reportable_quantity)
    {
        $this->container['expected_package_reportable_quantity'] = $expected_package_reportable_quantity;

        return $this;
    }

    /**
     * Gets physical_form
     *
     * @return string|null
     */
    public function getPhysicalForm()
    {
        return $this->container['physical_form'];
    }

    /**
     * Sets physical_form
     *
     * @param string|null $physical_form physical_form
     *
     * @return $this
     */
    public function setPhysicalForm($physical_form)
    {
        $this->container['physical_form'] = $physical_form;

        return $this;
    }

    /**
     * Gets radio_nuclide
     *
     * @return string|null
     */
    public function getRadioNuclide()
    {
        return $this->container['radio_nuclide'];
    }

    /**
     * Sets radio_nuclide
     *
     * @param string|null $radio_nuclide radio_nuclide
     *
     * @return $this
     */
    public function setRadioNuclide($radio_nuclide)
    {
        $this->container['radio_nuclide'] = $radio_nuclide;

        return $this;
    }

    /**
     * Gets radio_nuclide_activity_uom
     *
     * @return string|null
     */
    public function getRadioNuclideActivityUom()
    {
        return $this->container['radio_nuclide_activity_uom'];
    }

    /**
     * Sets radio_nuclide_activity_uom
     *
     * @param string|null $radio_nuclide_activity_uom radio_nuclide_activity_uom
     *
     * @return $this
     */
    public function setRadioNuclideActivityUom($radio_nuclide_activity_uom)
    {
        $this->container['radio_nuclide_activity_uom'] = $radio_nuclide_activity_uom;

        return $this;
    }

    /**
     * Gets radio_nuclide_activity_value
     *
     * @return float|null
     */
    public function getRadioNuclideActivityValue()
    {
        return $this->container['radio_nuclide_activity_value'];
    }

    /**
     * Sets radio_nuclide_activity_value
     *
     * @param float|null $radio_nuclide_activity_value radio_nuclide_activity_value
     *
     * @return $this
     */
    public function setRadioNuclideActivityValue($radio_nuclide_activity_value)
    {
        $this->container['radio_nuclide_activity_value'] = $radio_nuclide_activity_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


