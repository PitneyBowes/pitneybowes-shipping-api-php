<?php
/**
 * CarrierInfoApi
 * PHP version 5
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace pitneybowesShipping\shipping;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use pitneybowesShipping\ApiException;
use pitneybowesShipping\Configuration;
use pitneybowesShipping\HeaderSelector;
use pitneybowesShipping\ObjectSerializer;

/**
 * CarrierInfoApi Class Doc Comment
 *
 * @category Class
 * @package  pitneybowesShipping
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CarrierInfoApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCarrierFacilities
     *
     * Find Carrier Facilities
     *
     * @param  \pitneybowesShipping\shippingApi.model\CarrierFacilityRequest $carrier_facility_request carrier_facility_request (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \pitneybowesShipping\shippingApi.model\CarrierFacilityResponse|\pitneybowesShipping\shippingApi.model\CrossBorderQuotesErrors
     */
    public function getCarrierFacilities($carrier_facility_request, $x_pb_unified_error_structure = true)
    {
        list($response) = $this->getCarrierFacilitiesWithHttpInfo($carrier_facility_request, $x_pb_unified_error_structure);
        return $response;
    }

    /**
     * Operation getCarrierFacilitiesWithHttpInfo
     *
     * Find Carrier Facilities
     *
     * @param  \pitneybowesShipping\shippingApi.model\CarrierFacilityRequest $carrier_facility_request (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \pitneybowesShipping\shippingApi.model\CarrierFacilityResponse|\pitneybowesShipping\shippingApi.model\CrossBorderQuotesErrors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierFacilitiesWithHttpInfo($carrier_facility_request, $x_pb_unified_error_structure = true)
    {
        $request = $this->getCarrierFacilitiesRequest($carrier_facility_request, $x_pb_unified_error_structure);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\pitneybowesShipping\shippingApi.model\CarrierFacilityResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\CarrierFacilityResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\pitneybowesShipping\shippingApi.model\CrossBorderQuotesErrors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\CrossBorderQuotesErrors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\pitneybowesShipping\shippingApi.model\CarrierFacilityResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\CarrierFacilityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\CrossBorderQuotesErrors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarrierFacilitiesAsync
     *
     * Find Carrier Facilities
     *
     * @param  \pitneybowesShipping\shippingApi.model\CarrierFacilityRequest $carrier_facility_request (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierFacilitiesAsync($carrier_facility_request, $x_pb_unified_error_structure = true)
    {
        return $this->getCarrierFacilitiesAsyncWithHttpInfo($carrier_facility_request, $x_pb_unified_error_structure)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierFacilitiesAsyncWithHttpInfo
     *
     * Find Carrier Facilities
     *
     * @param  \pitneybowesShipping\shippingApi.model\CarrierFacilityRequest $carrier_facility_request (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierFacilitiesAsyncWithHttpInfo($carrier_facility_request, $x_pb_unified_error_structure = true)
    {
        $returnType = '\pitneybowesShipping\shippingApi.model\CarrierFacilityResponse';
        $request = $this->getCarrierFacilitiesRequest($carrier_facility_request, $x_pb_unified_error_structure);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierFacilities'
     *
     * @param  \pitneybowesShipping\shippingApi.model\CarrierFacilityRequest $carrier_facility_request (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarrierFacilitiesRequest($carrier_facility_request, $x_pb_unified_error_structure = true)
    {
        // verify the required parameter 'carrier_facility_request' is set
        if ($carrier_facility_request === null || (is_array($carrier_facility_request) && count($carrier_facility_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_facility_request when calling getCarrierFacilities'
            );
        }

        $resourcePath = '/v1/carrier-facility';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }


        // body params
        $_tempBody = null;
        if (isset($carrier_facility_request)) {
            $_tempBody = $carrier_facility_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierLicenseAgreement
     *
     * This operation retrieves a carrier's license agreement.
     *
     * @param  string $carrier The carrier name. Currently this must be set to: UPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \pitneybowesShipping\shippingApi.model\InlineResponse200|\pitneybowesShipping\shippingApi.model\Errors
     */
    public function getCarrierLicenseAgreement($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        list($response) = $this->getCarrierLicenseAgreementWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure);
        return $response;
    }

    /**
     * Operation getCarrierLicenseAgreementWithHttpInfo
     *
     * This operation retrieves a carrier's license agreement.
     *
     * @param  string $carrier The carrier name. Currently this must be set to: UPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \pitneybowesShipping\shippingApi.model\InlineResponse200|\pitneybowesShipping\shippingApi.model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierLicenseAgreementWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        $request = $this->getCarrierLicenseAgreementRequest($carrier, $origin_country_code, $x_pb_unified_error_structure);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\pitneybowesShipping\shippingApi.model\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\pitneybowesShipping\shippingApi.model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\pitneybowesShipping\shippingApi.model\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarrierLicenseAgreementAsync
     *
     * This operation retrieves a carrier's license agreement.
     *
     * @param  string $carrier The carrier name. Currently this must be set to: UPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierLicenseAgreementAsync($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        return $this->getCarrierLicenseAgreementAsyncWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierLicenseAgreementAsyncWithHttpInfo
     *
     * This operation retrieves a carrier's license agreement.
     *
     * @param  string $carrier The carrier name. Currently this must be set to: UPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierLicenseAgreementAsyncWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        $returnType = '\pitneybowesShipping\shippingApi.model\InlineResponse200';
        $request = $this->getCarrierLicenseAgreementRequest($carrier, $origin_country_code, $x_pb_unified_error_structure);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierLicenseAgreement'
     *
     * @param  string $carrier The carrier name. Currently this must be set to: UPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarrierLicenseAgreementRequest($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling getCarrierLicenseAgreement'
            );
        }
        // verify the required parameter 'origin_country_code' is set
        if ($origin_country_code === null || (is_array($origin_country_code) && count($origin_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_code when calling getCarrierLicenseAgreement'
            );
        }

        $resourcePath = '/v1/carrier/license-agreements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier !== null) {
            if('form' === 'form' && is_array($carrier)) {
                foreach($carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['carrier'] = $carrier;
            }
        }
        // query params
        if ($origin_country_code !== null) {
            if('form' === 'form' && is_array($origin_country_code)) {
                foreach($origin_country_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryCode'] = $origin_country_code;
            }
        }

        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierServiceRules
     *
     * Retrieves the rules governing the carrier's services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. **Currently this must be set to: USPS** (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $destination_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $rate_type_id The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param  string $future_shipment_date If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param  \DateTime $return_shipment If set to true, provides only services applicable for return shipment. (optional)
     * @param  bool $compact_response If set to true, returns only summary, without special service details. (optional)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \pitneybowesShipping\shippingApi.model\CarrierRule|\pitneybowesShipping\shippingApi.model\Errors
     */
    public function getCarrierServiceRules($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure = true, $rate_type_id = null, $future_shipment_date = null, $return_shipment = null, $compact_response = null)
    {
        list($response) = $this->getCarrierServiceRulesWithHttpInfo($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure, $rate_type_id, $future_shipment_date, $return_shipment, $compact_response);
        return $response;
    }

    /**
     * Operation getCarrierServiceRulesWithHttpInfo
     *
     * Retrieves the rules governing the carrier's services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. **Currently this must be set to: USPS** (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $destination_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $rate_type_id The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param  string $future_shipment_date If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param  \DateTime $return_shipment If set to true, provides only services applicable for return shipment. (optional)
     * @param  bool $compact_response If set to true, returns only summary, without special service details. (optional)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \pitneybowesShipping\shippingApi.model\CarrierRule|\pitneybowesShipping\shippingApi.model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierServiceRulesWithHttpInfo($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure = true, $rate_type_id = null, $future_shipment_date = null, $return_shipment = null, $compact_response = null)
    {
        $request = $this->getCarrierServiceRulesRequest($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure, $rate_type_id, $future_shipment_date, $return_shipment, $compact_response);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\pitneybowesShipping\shippingApi.model\CarrierRule' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\CarrierRule', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\pitneybowesShipping\shippingApi.model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\pitneybowesShipping\shippingApi.model\CarrierRule';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\CarrierRule',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarrierServiceRulesAsync
     *
     * Retrieves the rules governing the carrier's services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. **Currently this must be set to: USPS** (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $destination_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $rate_type_id The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param  string $future_shipment_date If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param  \DateTime $return_shipment If set to true, provides only services applicable for return shipment. (optional)
     * @param  bool $compact_response If set to true, returns only summary, without special service details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierServiceRulesAsync($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure = true, $rate_type_id = null, $future_shipment_date = null, $return_shipment = null, $compact_response = null)
    {
        return $this->getCarrierServiceRulesAsyncWithHttpInfo($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure, $rate_type_id, $future_shipment_date, $return_shipment, $compact_response)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierServiceRulesAsyncWithHttpInfo
     *
     * Retrieves the rules governing the carrier's services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. **Currently this must be set to: USPS** (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $destination_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $rate_type_id The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param  string $future_shipment_date If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param  \DateTime $return_shipment If set to true, provides only services applicable for return shipment. (optional)
     * @param  bool $compact_response If set to true, returns only summary, without special service details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierServiceRulesAsyncWithHttpInfo($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure = true, $rate_type_id = null, $future_shipment_date = null, $return_shipment = null, $compact_response = null)
    {
        $returnType = '\pitneybowesShipping\shippingApi.model\CarrierRule';
        $request = $this->getCarrierServiceRulesRequest($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure, $rate_type_id, $future_shipment_date, $return_shipment, $compact_response);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierServiceRules'
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. **Currently this must be set to: USPS** (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates. (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $destination_country_code The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     * @param  string $rate_type_id The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)
     * @param  string $future_shipment_date If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)
     * @param  \DateTime $return_shipment If set to true, provides only services applicable for return shipment. (optional)
     * @param  bool $compact_response If set to true, returns only summary, without special service details. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarrierServiceRulesRequest($carrier, $origin_country_code, $destination_country_code, $x_pb_unified_error_structure = true, $rate_type_id = null, $future_shipment_date = null, $return_shipment = null, $compact_response = null)
    {
        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling getCarrierServiceRules'
            );
        }
        // verify the required parameter 'origin_country_code' is set
        if ($origin_country_code === null || (is_array($origin_country_code) && count($origin_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_code when calling getCarrierServiceRules'
            );
        }
        // verify the required parameter 'destination_country_code' is set
        if ($destination_country_code === null || (is_array($destination_country_code) && count($destination_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $destination_country_code when calling getCarrierServiceRules'
            );
        }

        $resourcePath = '/v1/information/rules/rating-services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier !== null) {
            if('form' === 'form' && is_array($carrier)) {
                foreach($carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['carrier'] = $carrier;
            }
        }
        // query params
        if ($origin_country_code !== null) {
            if('form' === 'form' && is_array($origin_country_code)) {
                foreach($origin_country_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryCode'] = $origin_country_code;
            }
        }
        // query params
        if ($destination_country_code !== null) {
            if('form' === 'form' && is_array($destination_country_code)) {
                foreach($destination_country_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['destinationCountryCode'] = $destination_country_code;
            }
        }
        // query params
        if ($rate_type_id !== null) {
            if('form' === 'form' && is_array($rate_type_id)) {
                foreach($rate_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rateTypeId'] = $rate_type_id;
            }
        }
        // query params
        if ($future_shipment_date !== null) {
            if('form' === 'form' && is_array($future_shipment_date)) {
                foreach($future_shipment_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['futureShipmentDate'] = $future_shipment_date;
            }
        }
        // query params
        if ($return_shipment !== null) {
            if('form' === 'form' && is_array($return_shipment)) {
                foreach($return_shipment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['returnShipment'] = $return_shipment;
            }
        }
        // query params
        if ($compact_response !== null) {
            if('form' === 'form' && is_array($compact_response)) {
                foreach($compact_response as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['compactResponse'] = $compact_response;
            }
        }

        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCarrierSupportedDestination
     *
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. Currently this must be set to: USPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]|\pitneybowesShipping\shippingApi.model\Errors
     */
    public function getCarrierSupportedDestination($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        list($response) = $this->getCarrierSupportedDestinationWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure);
        return $response;
    }

    /**
     * Operation getCarrierSupportedDestinationWithHttpInfo
     *
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. Currently this must be set to: USPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \pitneybowesShipping\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[]|\pitneybowesShipping\shippingApi.model\Errors, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCarrierSupportedDestinationWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        $request = $this->getCarrierSupportedDestinationRequest($carrier, $origin_country_code, $x_pb_unified_error_structure);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\pitneybowesShipping\shippingApi.model\Errors' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\pitneybowesShipping\shippingApi.model\Errors', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\pitneybowesShipping\shippingApi.model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCarrierSupportedDestinationAsync
     *
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. Currently this must be set to: USPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierSupportedDestinationAsync($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        return $this->getCarrierSupportedDestinationAsyncWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCarrierSupportedDestinationAsyncWithHttpInfo
     *
     * This operation returns a list of supported destination countries to which the carrier offers international shipping services.
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. Currently this must be set to: USPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCarrierSupportedDestinationAsyncWithHttpInfo($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        $returnType = 'object[]';
        $request = $this->getCarrierSupportedDestinationRequest($carrier, $origin_country_code, $x_pb_unified_error_structure);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCarrierSupportedDestination'
     *
     * @param  \pitneybowesShipping\shippingApi.model\Carrier $carrier The carrier name. Currently this must be set to: USPS (required)
     * @param  \pitneybowesShipping\shippingApi.model\ISOCountryCode $origin_country_code The two-character ISO country code for the country where the shipment originates. (required)
     * @param  bool $x_pb_unified_error_structure Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCarrierSupportedDestinationRequest($carrier, $origin_country_code, $x_pb_unified_error_structure = true)
    {
        // verify the required parameter 'carrier' is set
        if ($carrier === null || (is_array($carrier) && count($carrier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier when calling getCarrierSupportedDestination'
            );
        }
        // verify the required parameter 'origin_country_code' is set
        if ($origin_country_code === null || (is_array($origin_country_code) && count($origin_country_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_code when calling getCarrierSupportedDestination'
            );
        }

        $resourcePath = '/v1/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier !== null) {
            if('form' === 'form' && is_array($carrier)) {
                foreach($carrier as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['carrier'] = $carrier;
            }
        }
        // query params
        if ($origin_country_code !== null) {
            if('form' === 'form' && is_array($origin_country_code)) {
                foreach($origin_country_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['originCountryCode'] = $origin_country_code;
            }
        }

        // header params
        if ($x_pb_unified_error_structure !== null) {
            $headerParams['X-PB-UnifiedErrorStructure'] = ObjectSerializer::toHeaderValue($x_pb_unified_error_structure);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
